{"version":3,"sources":["App.js","index.js"],"names":["App","useState","text","setText","timeRemaining","setTimeRemaining","isTimeRunning","setIsTimeRunning","wordCount","setWordCount","textBoxRef","useRef","useEffect","setTimeout","time","trim","split","filter","word","length","value","onChange","e","target","disabled","ref","onClick","current","focus","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6LAEe,SAASA,IAEtB,IACA,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0CF,mBAFpB,IAEtB,mBAAOG,EAAP,KAAsBC,EAAtB,KACA,EAA0CJ,oBAAS,GAAnD,mBAAOK,EAAP,KAAsBC,EAAtB,KACA,EAAkCN,mBAAS,GAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KACMC,EAAaC,iBAAO,MAuC1B,OAZAC,qBAAU,WACLN,GAAiBF,EAAgB,EAChCS,YAAW,WACPR,GAAiB,SAAAS,GAAI,OAAIA,EAAO,OACjC,KACqB,IAAlBV,IAVVG,GAAiB,GACjBE,EAAgCP,EAhBba,OAAOC,MAAM,KAChBC,QAAO,SAAAC,GAAI,MAAa,KAATA,KAAaC,WA2B7C,CAACf,EAAeE,IAKf,gCACE,mDACA,0BACAc,MAAOlB,EACPmB,SA1CiB,SAACC,GACpBnB,EAAQmB,EAAEC,OAAOH,QA0CfI,UAAWlB,EACXmB,IAAKf,IAEC,kDAAqBN,KACrB,wBACAsB,QAtCV,WACEnB,GAAiB,GACjBF,EAnBoB,IAoBpBF,EAAQ,IACRO,EAAWiB,QAAQH,UAAW,EAC9Bd,EAAWiB,QAAQC,QACnBnB,EAAa,IAiCLe,SAAUlB,EAFV,mBAMA,+CAAkBE,QC1D9BqB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC/B,EAAD,MAEFgC,SAASC,eAAe,U","file":"static/js/main.9fd9f565.chunk.js","sourcesContent":["import { useState, useEffect, useRef} from \"react\"\n\nexport default function App() {\n\n  const STARTING_TIME = 10\n  const [text, setText] = useState(\"\")\n  const [timeRemaining, setTimeRemaining] = useState(STARTING_TIME)\n  const [isTimeRunning, setIsTimeRunning] = useState(false)\n  const [wordCount, setWordCount] = useState(0)\n  const textBoxRef = useRef(null)\n\n  const handleChange = (e) => {\n    setText(e.target.value)\n  }\n\n  const calculateWordCount = (txt) => {\n    let wordsArr = txt.trim().split(\" \")\n    return wordsArr.filter(word => word !== \"\").length\n  }\n\n  // Start game\n  function startGame() {\n    setIsTimeRunning(true)\n    setTimeRemaining(STARTING_TIME)\n    setText(\"\")\n    textBoxRef.current.disabled = false\n    textBoxRef.current.focus()\n    setWordCount(0)\n}\n//End game\nfunction endGame() {\n    setIsTimeRunning(false)\n    setWordCount(calculateWordCount(text))\n}\n\n\n  useEffect(() => {\n    if(isTimeRunning && timeRemaining > 0) {\n        setTimeout(() => {\n            setTimeRemaining(time => time - 1)\n        }, 1000)\n    } else if(timeRemaining === 0) {\n        endGame()\n    }\n}, [timeRemaining, isTimeRunning])\n\n\n\n  return (\n    <div>\n      <h1>Speed typing game</h1>\n      <textarea\n      value={text}\n      onChange={handleChange}\n      disabled={!isTimeRunning}\n      ref={textBoxRef}\n      />\n            <h4>Time remaining: {timeRemaining}</h4>\n            <button \n            onClick={startGame}\n            disabled={isTimeRunning}\n            >\n                Start\n            </button >\n            <h2>Word count : {wordCount}</h2>\n\n    </div>\n  )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}